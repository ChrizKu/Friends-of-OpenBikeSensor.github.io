{"0": {
    "doc": "API",
    "title": "API",
    "content": " ",
    "url": "http://localhost:4000/software/api/api.html",
    "relUrl": "/software/api/api.html"
  },"1": {
    "doc": "App",
    "title": "App",
    "content": " ",
    "url": "http://localhost:4000/software/app/app.html",
    "relUrl": "/software/app/app.html"
  },"2": {
    "doc": "Architecture",
    "title": "Architecture",
    "content": "TODO: Describe broad architecture of the code . ",
    "url": "http://localhost:4000/software/firmware/architecture.html",
    "relUrl": "/software/firmware/architecture.html"
  },"3": {
    "doc": "Case",
    "title": "Case",
    "content": "TODO . ",
    "url": "http://localhost:4000/hardware/case/case.html",
    "relUrl": "/hardware/case/case.html"
  },"4": {
    "doc": "Coding Guidelines",
    "title": "Coding Guidelines",
    "content": "TODO . ",
    "url": "http://localhost:4000/software/firmware/coding_guidelines.html",
    "relUrl": "/software/firmware/coding_guidelines.html"
  },"5": {
    "doc": "Development",
    "title": "Development",
    "content": " ",
    "url": "http://localhost:4000/getting_started/development.html",
    "relUrl": "/getting_started/development.html"
  },"6": {
    "doc": "Firmware",
    "title": "Firmware",
    "content": " ",
    "url": "http://localhost:4000/software/firmware/firmware.html",
    "relUrl": "/software/firmware/firmware.html"
  },"7": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": " ",
    "url": "http://localhost:4000/getting_started/getting_started.html",
    "relUrl": "/getting_started/getting_started.html"
  },"8": {
    "doc": "Hardware",
    "title": "Hardware",
    "content": "The prototype by Zweirat used the following: . | ESP32 | HC-SR04P | 5-pin XS9 Aviation Connector | 12mm Push Button | 0.96 inch OLED Display | USB-C Charging Module | GPS Module | Push Button 12mm | Plenty of wires (0.25mm^2) and heat-shrink tubing | . To power the sensor you have a choice of Lithium-Iron or Lithium-Ion batteries . | Automatic Buck-Boost Step Up Down Module for LiPo usage | LiIon battery | . or . | Battery-Protection-Board | LiFePo charging module or alternative | LiFePo-Battery | . Li-Ion batteries are usually cheaper and have higher capacity at the same size. Lithium-Iron batteries are considered quite safe. NOTE: It looks like most people are prefering the Li-Ion variant now. So do we in the next couple of sensors being built for testing. Screws and nuts: . | 1x M5x35 | 2x M4x30 | 7x M3x45 | 4x M2x12 | 1x M2x10 | 1x M5 Nut | 2x M4 Nut | 7x M3 Nut | 5x M2 Nut | . You can consider getting slotted-head screws for the M2 ones, if you‚Äôre worried about damaging the tiny Allen screws. ",
    "url": "http://localhost:4000/hardware/hardware.html",
    "relUrl": "/hardware/hardware.html"
  },"9": {
    "doc": "Visualization",
    "title": "Visualization",
    "content": " ",
    "url": "http://localhost:4000/software/visualization/",
    "relUrl": "/software/visualization/"
  },"10": {
    "doc": "Home",
    "title": "Home",
    "content": "TODO . ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"11": {
    "doc": "PCB Board",
    "title": "PCB Board",
    "content": " ",
    "url": "http://localhost:4000/hardware/pcb_board/pbc_board.html",
    "relUrl": "/hardware/pcb_board/pbc_board.html"
  },"12": {
    "doc": "Setup Development Environment",
    "title": "Setup Development Environment",
    "content": " ",
    "url": "http://localhost:4000/software/firmware/setup.html",
    "relUrl": "/software/firmware/setup.html"
  },"13": {
    "doc": "Setup Development Environment",
    "title": "VSCode",
    "content": ". | Download and install Visual Studio Code. | Open the open-bike-sensor.code-workspace in the project root. | Install the recommended extensions (this might take a while, because Platform.io gets installed) and restart VSCode when required. | Linux only: Install platformio-udev.rules by following this guide. | Compile the code (Sidebar: üëΩ &gt; Build; Bottom bar: ‚úÖ) | Connect your ESP and upload the code (Sidebar: üëΩ &gt; Upload; Bottom bar: ‚û°Ô∏è) | . Alternatively you can also download the dependencies yourself and install it with the Arduino IDE (see below). Troubleshooting . | Can‚Äôt upload to device You can specify the device port that VS Code should upload to. Duplicate the custom_config.ini.example file to custom_config.ini and set the upload_port there manually. If this option is not set, the upload port will be autodetected which can fail on some systems or might select the wrong device if other devices are plugged in. | Compiling the code fails Use the Clean command and delete the .pio directory. Compiling the code again should work now. If any errors persist, please create a new issue! . | . ",
    "url": "http://localhost:4000/software/firmware/setup.html#vscode",
    "relUrl": "/software/firmware/setup.html#vscode"
  },"14": {
    "doc": "Setup Development Environment",
    "title": "CLion",
    "content": ". | Install PlatformIO Core (CLI). | Download and open CLion. | Install the PlatformIO for CLion plugin. Open Configure &gt; Plugins in the welcome screen (alternatively Plugins in the preferences) and search for ‚ÄúPlatformIO‚Äù in the Marketplace tab. | Restart CLion. | Open the project folder withOpen or Import in the welcome screen (alternatively File &gt; Open ... using the menu bar) | A popup ‚ÄúCreate CMakeLists.txt?‚Äù will appear. Select ‚Äúyes‚Äù. | Open the CLion preferences and navigate to Build, Execution, Deployment &gt; CMake. Delete the Debug profile and add a new profile. This new profile should automatically have the name esp32dev. Apply these changes and close the preferences. | Select the configuration PlatformIO Build &amp; Upload | esp32dev in the top bar. | Use the üî® Build button to compile the code. | Connect your ESP and use the ‚ñ∂ Run button to compile and upload the code. To upload without re-compiling the code, switch to the configuration PlatformIO Only Upload | esp32dev in the top bar. | . Troubleshooting . | Can‚Äôt upload to device You can specify the device port that CLion should upload to. Duplicate the custom_config.ini.example file to custom_config.ini and set the upload_port there manually. If this option is not set, the upload port will be autodetected which can fail on some systems or might select the wrong device if other devices are plugged in. | Compiling the code fails In the menu bar run/click Tools &gt; PlatformIO &gt; Re-Init and then try to compile the code again. If this didn‚Äôt fix it delete the directories .pio and cmake-build-*. Compiling the code again should work now. If any errors persist, please create a new issue! . | . ",
    "url": "http://localhost:4000/software/firmware/setup.html#clion",
    "relUrl": "/software/firmware/setup.html#clion"
  },"15": {
    "doc": "Setup Development Environment",
    "title": "Arduino IDE",
    "content": ". | Install board | Install dependencies | Open OpenBikeSensorFirmware.ino in Arduino IDE | Compile and upload to ESP32 | Connect sensor | . There are detailed description for Ubuntu and ArchLinux. Dependencies . Board: . | ESP32 by Espressif | . Libraries: . | ArduinoJson by Benoit Blanchon | CircularBuffer by AgileWare | TinyGPSPlus by Mikal Hart | SSD1306 by ThingPulse | . ",
    "url": "http://localhost:4000/software/firmware/setup.html#arduino-ide",
    "relUrl": "/software/firmware/setup.html#arduino-ide"
  },"16": {
    "doc": "Software",
    "title": "Software",
    "content": "TODO . ",
    "url": "http://localhost:4000/software/software.html",
    "relUrl": "/software/software.html"
  },"17": {
    "doc": "Todo",
    "title": "Todo",
    "content": " ",
    "url": "http://localhost:4000/software/app/todo.html",
    "relUrl": "/software/app/todo.html"
  },"18": {
    "doc": "Todo",
    "title": "Todo",
    "content": " ",
    "url": "http://localhost:4000/software/api/todo.html",
    "relUrl": "/software/api/todo.html"
  },"19": {
    "doc": "Todo",
    "title": "Todo",
    "content": " ",
    "url": "http://localhost:4000/software/visualization/todo.html",
    "relUrl": "/software/visualization/todo.html"
  },"20": {
    "doc": "Todo",
    "title": "Todo",
    "content": " ",
    "url": "http://localhost:4000/hardware/pcb_board/todo.html",
    "relUrl": "/hardware/pcb_board/todo.html"
  },"21": {
    "doc": "Todo",
    "title": "Todo",
    "content": " ",
    "url": "http://localhost:4000/hardware/case/todo.html",
    "relUrl": "/hardware/case/todo.html"
  },"22": {
    "doc": "Usage",
    "title": "Use the OpenBikeSensor",
    "content": " ",
    "url": "http://localhost:4000/getting_started/usage.html#use-the-openbikesensor",
    "relUrl": "/getting_started/usage.html#use-the-openbikesensor"
  },"23": {
    "doc": "Usage",
    "title": "Quick start guide",
    "content": "This assumes you have a working OpenBikeSensor. If not start here . In case you might get a OpenBikeSensor, you should do some first steps. | Check, if your handlebar fits the OpenBikeSensor‚Äôs display/button holder. There are basically two different kinds of handlebars: thinner ones, with a 25,4mm diameter and the other ones, with a 31.8mm diameter. You might create some kind of adapter, if the device is designed for 31,8mm and you have a 25,4mm handlebar, but the other way around is not possible | Measure the distance between the outer edge of the device and the end of your handlebar. Enter these values into the configuration options. | Set your privacy zone(s). You could probably get the GPS location with any digital map app. Enter these values into the configuration options. | Check the SD card, if it‚Äôs ok and - in best case - empty. | Load the device‚Äôs battery. | Put it on the bike and go for a ride. Please take care about traffic around you and don‚Äôt let the OpenBikeSensor distract you! | . ",
    "url": "http://localhost:4000/getting_started/usage.html#quick-start-guide",
    "relUrl": "/getting_started/usage.html#quick-start-guide"
  },"24": {
    "doc": "Usage",
    "title": "Wiki",
    "content": "Use . Don‚Äôt put too much attention on the OpenBikeSensor, always take care about the traffic around you! . | Power on the device and - if possible - wait until the device has a GPS fix, i.e. your GPS location. Since it‚Äôs not using the location services, you know from your mobile phone, this might take some time. The display will exit the status screen, as soon as your location is known. In case you can‚Äôt wait due to some reasons, you could skip the wait with a push of the button. While moving, it might take up to 15mins, until the devices knows where you are. | Ride your bike and push the button every time you‚Äôre passed (no matter if it‚Äôs a car or truck or bus or motorbike). To get some idea, how often close passes occur, it‚Äôs important to confirm every pass, not only the close ones. | Power off. Keep in mind to always keep the button pushed, when you switch off the device! | . Configuration . You can enter the configuration mode by pushing the button while turning on the device. Then it will either open a unique WiFi access point, including the device‚Äôs MAC address named ‚ÄúOpenBikeSensor-xxxxxxxxxxxx‚Äù with the initial password ‚Äú12345678‚Äù or try to connect to an existing WiFi if credentials were entered in a previous configuration. The configuration page can be found on ‚Äúhttp://openbikesensor.local‚Äù or ‚Äú172.20.0.1‚Äù on the AP or on IP adress shown on the device‚Äôs display. It might be neccessary to de-activate the mobile data on your mobile phone to access this page. You can directly upload a precompiled binary; the latest release can always be found here. There are several chapters in the configuration. Update Firmware . After downloading the latest release (or any other version, in case you need a special setup), just click on ‚ÄúUpdate‚Äù in the options. Select the downloaded file and click update. The device will automatically reboot after a successful update. Privacy Zones . You could set as many privacy zones, as you like, including their own radius. In the options you could define, how the OpenBikeSensor behaves in these zone(s). Config . Sensor . Here you can define the offset between the end of your handle bar and the outer edge of the OpenBikeSensor. These values will automatically get substracted from the current measurement. Additionally you could ‚Äúswap‚Äù the left and right measurement, in case you mounted the device different. GPS . You could define, in which way your device will acknowledge a valid GPS fix. Generic Display . You could flip the display, if you need to mount it upside down or invert it, which might help in bright sunlight. Measurement Display . Here are several options, which values you might want to see on your display. It includes a ‚Äúsimple mode‚Äù, where you only see the measurement to the left. Privacy Options . To keep some privacy, you could tell your device to stop recording near your home or any other privacy zone. This could be no recording at all or just no GPS-tracking any more, but still storing all confirmed passes. WiFi Settings . The OpenBikeSensor can also connect to available WiFis if you supply credentials. This is convenient when you want to stay connected to your local WiFi when configuring the sensor. It will tell you the IP adress to connect to on the display. Reboot . This button restarts the device into the regular measurement mode and leaves the options. ",
    "url": "http://localhost:4000/getting_started/usage.html#wiki",
    "relUrl": "/getting_started/usage.html#wiki"
  },"25": {
    "doc": "Usage",
    "title": "Usage",
    "content": " ",
    "url": "http://localhost:4000/getting_started/usage.html",
    "relUrl": "/getting_started/usage.html"
  }
}
